<?php

namespace App\Services;

// Generated by DS

use RuntimeException;

class MetricsService
{
    const SPOTIFY_REQUEST_COST = 2000;
    const GENIUS_REQUEST_COST = 1000;
    const SC_REQUEST_COST = 1000;
    const DOMAIN_REQUEST_COST = 500;

    private ?float $start = null;
    private ?float $memoryStart = null;
    private float $costMultiplier;
    private bool $trackMemory;

    public function __construct(
        float $costMultiplier = self::DOMAIN_REQUEST_COST,
        bool $trackMemory = true
    ) {
        $this->costMultiplier = $costMultiplier;
        $this->trackMemory = $trackMemory;
    }

    public function start(): void
    {
        $this->start = microtime(true);
        
        if ($this->trackMemory) {
            $this->memoryStart = memory_get_usage(true);
        }
    }

    public function end(string $status = 'success'): array
    {
        if ($this->start === null) {
            throw new RuntimeException('MetricsService: end() called before start()');
        }

        $duration = microtime(true) - $this->start;
        $metrics = [
            'status' => $status,
            'duration_sec' => round($duration, 6),
            'duration_ms' => round($duration * 1000, 3),
            'cost' => round($duration * 1000 * $this->costMultiplier),
        ];

        if ($this->trackMemory && $this->memoryStart !== null) {
            $metrics = array_merge($metrics, [
                'memory_peak_mb' => round(memory_get_peak_usage(true) / 1024 / 1024, 4),
                'memory_usage_mb' => round(memory_get_usage(true) / 1024 / 1024, 4),
                'memory_diff_mb' => round((memory_get_usage(true) - $this->memoryStart) / 1024 / 1024, 4),
            ]);
        }

        $this->reset();
        return $metrics;
    }

    public function reset(): void
    {
        $this->start = null;
        $this->memoryStart = null;
    }
}